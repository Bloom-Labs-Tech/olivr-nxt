generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Feature {
  moderation
  welcome
  goodbye
  autorole
  logs
  music
  fun
  utility
  leveling
  economy
  tickets
  announcement
  events
  generators
  suggestions
  security
  counting
}

enum Region {
  na
  eu
  ap
  kr
}

model User {
  id String @id

  guilds   GuildMember[]
  keys     ApiKey[]
  sessions Session[]
  messages TicketMessage[]

  valorant ValorantUser?
}

model ValorantUser {
  puuid  String @id
  region Region

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Session {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  accessToken  String
  refreshToken String

  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Guild {
  id       String         @id
  members  GuildMember[]
  tickets  Ticket[]
  features GuildFeature[]
}

model GuildMember {
  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  xp         Int      @default(0)
  xpCooldown DateTime @default(now())

  tickets        Ticket[]
  ticketsClosed  Ticket[] @relation("ClosedBy")
  ticketsClaimed Ticket[] @relation("ClaimedBy")

  @@id([guildId, userId])
  @@unique([guildId, userId])
}

model Ticket {
  id        String          @id
  channelId String?
  guild     Guild           @relation(fields: [guildId], references: [id])
  guildId   String
  creator   GuildMember     @relation(fields: [creatorId, guildId], references: [userId, guildId])
  creatorId String
  messages  TicketMessage[]

  createdAt   DateTime     @default(now())
  claimedAt   DateTime?
  claimedBy   GuildMember? @relation(fields: [claimedById, guildId], references: [userId, guildId], name: "ClaimedBy")
  claimedById String?
  closedAt    DateTime?
  closedBy    GuildMember? @relation(fields: [closedById, guildId], references: [userId, guildId], name: "ClosedBy")
  closedById  String?
}

model TicketMessage {
  id       String @id
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  content   String
  createdAt DateTime @default(now())
}

model ApiKey {
  id     String @id
  key    String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id])

  uses      Int     @default(0)
  maxUses   Int?
  active    Boolean @default(true)
  rateLimit Int     @default(0)

  createdAt DateTime  @default(now())
  lastUsed  DateTime  @default(now())
  expiresAt DateTime?
}

model GuildFeature {
  enabled Boolean @default(false)
  name    Feature
  data    Json?   @default("{}")

  guild   Guild  @relation(fields: [guildId], references: [id])
  guildId String

  @@id([name, guildId])
  @@unique([name, guildId])
}
